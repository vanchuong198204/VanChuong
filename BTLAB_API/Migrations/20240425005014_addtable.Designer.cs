// <auto-generated />
using System;
using BTLAB_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BTLAB_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240425005014_addtable")]
    partial class addtable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BTLAB_API.Models.Domain.Authors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Nguyen Van A"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Tran Van B"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Nguyễn Văn Chương"
                        });
                });

            modelBuilder.Entity("BTLAB_API.Models.Domain.Book_Author", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BooksAuthor");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1,
                            Id = 1
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2,
                            Id = 2
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 3,
                            Id = 3
                        });
                });

            modelBuilder.Entity("BTLAB_API.Models.Domain.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("PublishersId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PublishersId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoverUrl = "url1",
                            DateAdded = new DateTime(2024, 4, 25, 7, 50, 14, 94, DateTimeKind.Local).AddTicks(6446),
                            DateRead = new DateTime(2024, 4, 25, 7, 50, 14, 94, DateTimeKind.Local).AddTicks(6431),
                            Description = "Description for Book 1",
                            Genre = 1,
                            IsRead = true,
                            PublishersId = 1,
                            Rate = 4,
                            Title = "Book 1"
                        },
                        new
                        {
                            Id = 2,
                            CoverUrl = "url2",
                            DateAdded = new DateTime(2024, 4, 25, 7, 50, 14, 94, DateTimeKind.Local).AddTicks(6449),
                            DateRead = new DateTime(2024, 4, 25, 7, 50, 14, 94, DateTimeKind.Local).AddTicks(6448),
                            Description = "Description for Book 2",
                            Genre = 2,
                            IsRead = false,
                            PublishersId = 2,
                            Rate = 3,
                            Title = "Book 2"
                        },
                        new
                        {
                            Id = 3,
                            CoverUrl = "url3",
                            DateAdded = new DateTime(2024, 4, 25, 7, 50, 14, 94, DateTimeKind.Local).AddTicks(6451),
                            DateRead = new DateTime(2024, 4, 25, 7, 50, 14, 94, DateTimeKind.Local).AddTicks(6450),
                            Description = "Description for Book 3",
                            Genre = 2,
                            IsRead = true,
                            PublishersId = 2,
                            Rate = 4,
                            Title = "Book 3"
                        });
                });

            modelBuilder.Entity("BTLAB_API.Models.Domain.Publishers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Publisher A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Publisher B"
                        });
                });

            modelBuilder.Entity("BTLAB_API.Models.Domain.Book_Author", b =>
                {
                    b.HasOne("BTLAB_API.Models.Domain.Authors", "authors")
                        .WithMany("Book_Authors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BTLAB_API.Models.Domain.Books", "books")
                        .WithMany("Book_Author")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authors");

                    b.Navigation("books");
                });

            modelBuilder.Entity("BTLAB_API.Models.Domain.Books", b =>
                {
                    b.HasOne("BTLAB_API.Models.Domain.Publishers", "publishers")
                        .WithMany("Book")
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("publishers");
                });

            modelBuilder.Entity("BTLAB_API.Models.Domain.Authors", b =>
                {
                    b.Navigation("Book_Authors");
                });

            modelBuilder.Entity("BTLAB_API.Models.Domain.Books", b =>
                {
                    b.Navigation("Book_Author");
                });

            modelBuilder.Entity("BTLAB_API.Models.Domain.Publishers", b =>
                {
                    b.Navigation("Book");
                });
#pragma warning restore 612, 618
        }
    }
}
